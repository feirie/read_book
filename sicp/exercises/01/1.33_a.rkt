(define (filtered-accumulate filter? combiner null-value term a next b)
  (if (> a b)
      null-value
      (combiner (if (filter? (term a)) (term a) null-value)
                (filtered-accumulate filter?  combiner null-value term (next a) next b))))

(define (prime? n)
  (define (divides? a b)
    (= (remainder b a) 0))
  (define (smallest-divisor n)
    (find-divisor n 2))
  (define (find-divisor n test-divisor)
    (cond ((> (square test-divisor) n) n)
          ((divides? test-divisor n) test-divisor)
          (else (find-divisor n (+ test-divisor 1)))))
  (define (square x)
    (* x x))
  (= n (smallest-divisor n)))
(filtered-accumulate prime? + 0 identity a inc b)