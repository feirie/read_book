train_dat<-read.csv(paste0(dir,"train.csv"))
test_dat<-read.csv(paste0(dir,"test.csv"))
head(train_dat)
summary(train_dat)
fit.full<-glm(Survived~Pclass+Sex+Age+SibSp+Parch+Ticket+Fare+Embarked,data = trian_dat,family = binomial())
fit.full<-glm(Survived~Pclass+Sex+Age+SibSp+Parch+Ticket+Fare+Embarked,data = train_dat,family = binomial())
fit.full<-glm(Survived~Pclass+Sex+Age+SibSp+Parch+Ticket+Fare,data = train_dat,family = binomial())
summary(fit.ful)
summary(fit.full)
fit.full<-glm(Survived~Pclass+Sex+Age+SibSp+Parch+Fare,data = train_dat,family = binomial())
summary(fit.full)
fit.full2<-glm(Survived~Pclass+Sex+Age+SibSp,data = train_dat,family = binomial())
anova(fit.full,fit.full2,test="Chisq")
summary(fit.full2)
library(psych)
install.packages("psych")
library(psych)
head(USJudgeRatings)
library(psych)
head(USJudgeRatings)
pc<-principal(USJudgeRatings[,-1],nfactors = 1)
pc
fa.parallel(USJudgeRatings[,-1],fa="PC",n.iter = 100)
fa.parallel(USJudgeRatings[,-1],fa="PC",n.iter = 100,show.legend = F)
screeplot(USJudgeRatings[,-1],type="lines")
library(psych)
head(USJudgeRatings)
fa.parallel(USJudgeRatings[,-1],fa="PC",n.iter = 100,show.legend = F)
fa.parallel(USJudgeRatings[,-1],fa="PC",n.iter = 100,show.legend = F,main="")
install.packages("robust")
install.packages("recommenderlab")
library("recommenderlab")
m <- matrix(sample(c(0,1), 50, replace=TRUE), nrow=5, ncol=10,
dimnames=list(users=paste("u", 1:5, sep=''),
items=paste("i", 1:10, sep='')))
install.packages('shiny')
library("shiny")
runApp("d:/work/temp/shinyapp/1")
runApp("d:/work/temp/shinyapp/1")
runExample("01_hello")
runApp("d:/work/temp/shinyapp/1")
runExample("06_tabsets")
runExample("11_timer")
runApp("d:/work/temp/shinyapp/1")
runApp("d:/work/temp/shinyapp/1")
runApp("d:/work/temp/shinyapp/1")
runApp("d:/work/temp/shinyapp/1")
runApp("d:/work/temp/shinyapp/1")
runApp("d:/work/temp/shinyapp/1")
runApp("d:/work/temp/shinyapp/1")
runApp("stockVis")
install.packages("quantmod")
library("quantmod")
runApp("stockVis")
install.packages("RJDBC")
library("rpart")
library("RWeka")
install.packages("RWeka")
library("mvpart")
install.packages("mvpart")
library("mvpart")
head(car)
library("datasets")
car.test.frame
car.test.frame$Mileage<-100*4.546/(1.6*car.test.frame$Mileage)
names(car.test.frame)<-c("价格","产地","可靠性","英里数","类型","车重","发动机功率","净马力")
head(car.test.frame)
str(car.test.frame)
car.test.frame$"水平油耗"<-NA
which(car.test.frame$"油耗">11.6)
car.test.frame$"油耗">11.6
car.test.frame$"油耗"
car.test.frame
head(car.test.frame)
names(car.test.frame)<-c("价格","产地","可靠性","油耗","类型","车重","发动机功率","净马力")
car.test.frame$"油耗">11.6
head(car.test.frame)
names(car.test.frame)<-c("价格","产地","可靠性","油耗","类型","车重","发动机功率","净马力","水平油耗")
car.test.frame$"水平油耗"[which(car.test.frame$"油耗">11.6)]<-"A"
car.test.frame$"水平油耗"[which(car.test.frame$"油耗"<9)]<-"C"
car.test.frame$"水平油耗"[which(car.test.frame$"油耗"==NA)]<-"B"
summary(car.test.frame)
table(car.test.frame$"水平油耗"
)
car.test.frame$"油耗">11.6
sum(car.test.frame$"油耗">11.6)
sum(car.test.frame$"油耗"<9)
car.test.frame$"水平油耗"<-NA
car.test.frame$"水平油耗"[which(car.test.frame$"油耗">11.6)]<-"A"
car.test.frame$"水平油耗"[which(car.test.frame$"油耗"<9)]<-"C"
car.test.frame$"水平油耗"[which(car.test.frame$"水平油耗"==NA)]<-"B"
table(car.test.frame$"水平油耗")
car.test.frame$"水平油耗"==NA
is.na(car.test.frame$"水平油耗")
car.test.frame$"水平油耗"[which(is.na(car.test.frame$"水平油耗"))]<-"B"
table(car.test.frame$"水平油耗")
car.test.frame[1:10,c(4,9)]
table(car.test.frame$"水平油耗")
table(car.test.frame$"水平油耗")/4
round(table(car.test.frame$"水平油耗")/4)
library(sampling)
sub<-strata(car.test.frame,stratanames = "分组油耗",size=(round(table(car.test.frame$"水平油耗")/4)))
sub<-strata(car.test.frame,stratanames = "分组油耗",size=round(table(car.test.frame$"水平油耗")/4))
sub<-strata(car.test.frame,stratanames = "分组油耗",size=c(2,4,9))
sub<-strata(car.test.frame,stratanames = "分组油耗",size=c(2,4,9), method=“srswor"")
sub<-strata(car.test.frame,stratanames = "分组油耗",size=c(2,4,9), method=“srswor")
library(datasets)
car
iris
sub1<-sample(nrow(iris),10,replace = T)
sub1
rep(0,nrow(iris)-1,1)
c(rep(0,nrow(iris)-1,1))
nrow(iris)
rep(0,1)
rep(0,10)
sub2<-sample(nrow(iris),10,replace = T,prob=c(rep(0,nrow(iris)-1),1))
sub2
library(sampling)
library(MASS)
Insurance
head(library(MASS))
head(Insurance)
sub4<-strata(Insurance,stratanames = "District",size = c(1,2,3,4),method = "srswor")
sub4
sub4<-strata(Insurance,stratanames = "District",size = c(1,2,3,4),method = "srswor",description = T)
getdata(Insurance,sub4)
Insurance[sub4,]
sub4
sub6<-strata(Insurance,stratanames = "District",size = c(1,2,3,4),method = "srswor",pik=Insurance$Claims)
sub6
getdata(Insurance,sub6)
sub6<-strata(Insurance,stratanames = "District",size = c(1,2,3,4),method = "systematic",pik=Insurance$Claims)
summary(Insurance)
sub6
getdata(Insurance,sub6)
sub7<-cluster(Insurance,clustername = "District",size = 2,method = "srswor",description = T)
sub7
library("rpart")
data(car.test.frame)
head(car.test.frame)
car.test.frame$Mileage<-100*4.546/(1.6*car.test.frame$Mileage) #将英里数的取值换算为"油耗"指标
names(car.test.frame)<-c("价格","产地","可靠性","油耗","类型","车重","发动机功率","净马力")
head(car.test.frame)
str(car.test.frame)
summary(car.test.frame)
car.test.frame$"水平油耗"<-NA
car.test.frame$"水平油耗"[which(car.test.frame$"油耗">11.6)]<-"A"
car.test.frame$"水平油耗"[which(car.test.frame$"油耗"<9)]<-"C"
car.test.frame$"水平油耗"[which(is.na(car.test.frame$"水平油耗"))]<-"B"
car.test.frame[1:10,c(4,9)]
table(car.test.frame$"水平油耗")
library(sampling)
sub=strata(car.test.frame,size = c(2,4,9),method = "srswor")
sub=strata(car.test.frame,size = c(2,4,9),method = "srswor",stratanames = "水平油耗")
sub
table(car.test.frame$"水平油耗")
table(car.test.frame$"水平油耗")/4
round(table(car.test.frame$"水平油耗")/4)
type(round(table(car.test.frame$"水平油耗")/4))
typeof(round(table(car.test.frame$"水平油耗")/4))
typeof(c(1,2))
sub=strata(car.test.frame,size = round(table(car.test.frame$"水平油耗")/4),method = "srswor",stratanames = "水平油耗")
sub
sub
head(car.test.frame)
order(car.test.frame$"水平油耗")
order(car.test.frame$"水平油耗",decreasing=T)
order(car.test.frame$"水平油耗",decreasing=F)
car.test.frame[order(car.test.frame$"水平油耗",decreasing=F),]
car_order<-car.test.frame[order(car.test.frame$"水平油耗",decreasing=F),]
sub=strata(car_order,size = c(2,4,9),method = "srswor",stratanames = "水平油耗")
sub
train_car<-car.test.frame[-sub$ID_unit,]
nrow(train_car)
test_car<-car.test.frame[sub$ID_unit,]
nrow(test_car)
library(rpart)
head(car.test.frame)
formula_car_reg<-油耗~价格+产地+可靠性+油耗+类型+车重+发动机功率+净马力
rp_car_reg<-rpart(formula_car_reg,data = train_car,method = "anova")
formula_car_reg<-水平油耗~价格+产地+可靠性+油耗+类型+车重+发动机功率+净马力
rp_car_reg<-rpart(formula_car_reg,data = train_car,method = "anova")
print(rp_car_reg)
rp_car_reg
head(car.test.frame)
formula_car_reg<-油耗~价格+产地+可靠性+油耗+类型+车重+发动机功率+净马力
rp_car_reg<-rpart(formula_car_reg,data = train_car,method = "anova")
rp_car_reg
printcp(rp_car_reg)
set.seed(1234)
car_order<-car.test.frame[order(car.test.frame$"水平油耗",decreasing=F),]
sub=strata(car.test.frame,size = c(2,4,9),method = "srswor",stratanames = "水平油耗")
train_car<-car.test.frame[-sub$ID_unit,]
test_car<-car.test.frame[sub$ID_unit,]
formula_car_reg<-水平油耗~价格+产地+可靠性+油耗+类型+车重+发动机功率+净马力  #设定模型公式
rp_car_reg<-rpart(formula_car_reg,data = train_car,method = "anova")  #按照公式对训练集train_car构建回归树
print(rp_car_reg) #导出回归树的cp表格
formula_car_reg<-油耗~价格+产地+可靠性+油耗+类型+车重+发动机功率+净马力  #设定模型公式
rp_car_reg<-rpart(formula_car_reg,data = train_car,method = "anova")  #按照公式对训练集train_car构建回归树
print(rp_car_reg) #导出回归树的cp表格
print(rp_car_reg)
printcp(rp_car_reg)
summary(rp_car_reg)
rp_car_reg<-rpart(formula_car_reg,data = train_car,method = "anova",minsplit=10)
rp_car_reg1<-rpart(formula_car_reg,data = train_car,method = "anova",minsplit=10)
rp_car_reg<-rpart(formula_car_reg,data = train_car,method = "anova")
rp_car_reg1<-rpart(formula_car_reg,data = train_car,method = "anova",minsplit=10)
#将分支包含最小样本数minsplit从默认值20更改为10
print(rp_car_reg1)
printcp(rp_car_reg1)
summary(rp_car_reg1)
rp_car_reg
rp_car_reg1
printcp(rp_car_reg)
printcp(rp_car_reg1)
rp_car_reg2<-rpart(formula_car_reg,data = train_car,method = "anova",cp=0.1)
#将CP值从默认值0.01改为0.1
print(rp_car_reg2)
printcp(rp_car_reg2)
summary(rp_car_reg2)
rp_car_reg3<-prune.rpart(rp_car_reg,cp=0.1)
print(rp_car_reg3)
rp_car_reg4<-rpart(formula_car_reg,data = train_car,method = "anova",maxdepth=1)
rp_car_reg4
rp_car_plot<-rpart(formula_car_reg,data = train_car,method = "anova",minsplit=10)
print(rp_car_plot)
rpart.plot(rp_car_plot)
plot(rp_car_plot)
install.packages("rpart.plot")
library(rpart.plot)
rpart.plot(rp_car_plot)
library(sampling)
install.packages("adabag")
library(adabag)
library("randomForest")
set.seed(4)
data(mtcars)
mtcars_rf<-randomForest(mpg~.,data = mtcars,ntree = 1000,importance = T)
importance(mtcars_rf)
set.seed(1)
data(iris)
iris_rf<-randomForest(Species~.,data = mtcars,ntree = 1000,proximity=T)
head(iris)
iris_rf<-randomForest(Species~.,data = mtcars,ntree = 1000,proximity=T)
iris_rf<-randomForest(Species~.,data = iris,proximity=T)
119/27
101/23
MDSplot(iris_rf,iris$Species,palette = rep(1,3),pch=as.numeric(iris$Species))
data(iris)
iris.na<-iris
iris.na[75,2]<-NA
iris.na[125,3]<-NA
set.seed(111)
iris.imputed<-rfImpute(Species~.,data=iris.na)
list("real"=iris[c(75,125),1:4])
list("real"=iris[c(75,125),1:4],"hava-NA"=iris.na[c(75,125),1:4])
list("real"=iris[c(75,125),1:4],"hava-NA"=iris.na[c(75,125),1:4],"disposed"=iris.imputed[c(75,125),1:4])
list("real"=iris[c(75,125),1:4],"hava-NA"=iris.na[c(75,125),1:4],"disposed"=round(iris.imputed[c(75,125),1:4],1))
round(iris.imputed[c(75,125),2:5],1)
list("real"=iris[c(75,125),1:4],"hava-NA"=iris.na[c(75,125),1:4],"disposed"=round(iris.imputed[c(75,125),2:5],1))
hist（treesize(iris_rf))
hist(treesize(iris_rf))
library(arules)
data(Groceries)
head(Groceries)
summary(Groceries)
inspect(Groceries[1:10])
rules0<-apriori(Groceries,parameter=list(support=0.001,confidence=0.5))
rules0
inspect(rules0[1:10])
rules1<-apriori(Groceries,parameter=list(support=0.005,confidence=0.5)) #120
rules2<-apriori(Groceries,parameter=list(support=0.005,confidence=0.6)) #22
rules3<-apriori(Groceries,parameter=list(support=0.005,confidence=0.64)) #4
inspect(rules3)
rules.sorted_sup<-sort(rules0,by="support")
rules.sorted_sup
rules.sorted_conf<-sort(rules0,by="confidence")
inspect(rules.sorted_conf[1:10])
rules.sorted_lift<-sort(rules0,by="lift")
inpsect(rules.sorted_lift[1:5])
inpspect(rules.sorted_lift[1:5])
inspect(rules.sorted_lift[1:5])
rules4<-apriori(Groceries,parameter=list(support=0.001,confidence=0.1,maxlen=2),appearance=list(rhs="mustard",default="lhs"))
inspect(rules4)
itemsets_apr<-apriori(Groceries,parameter=list(support=0.001,target="frequent itemsets"),control=list(sort=-1))
inspect(itemsets_apr[1:5])
itemsets_ecl<-eclat(Groceries,parameter=list(minlen=1,maxlen=3,support=0.001,target="frequent itemsets"),control=list(sort=-1))
inspect(itemsets_ecl[1:5])
library(arulesViz)
rules5<-apriori(Groceries,parameter=list(support=0.002,confidence=0.5)) #生成关联规则rules5
plot(rules5)
install.packages("arulesViz")
library(arulesViz)
rules5<-apriori(Groceries,parameter=list(support=0.002,confidence=0.5)) #生成关联规则rules5
plot(rules5)
plot(rules5)
plot(rules5,interactive=TRUE)
install.packages("grid")
install.packages("grid")
install.packages("grid")
install.packages("grid")
install.packages("grid")
library(arulesViz)
library(arules)
library(grid)
rules5<-apriori(Groceries,parameter=list(support=0.002,confidence=0.5)) #生成关联规则rules5
plot(rules5)
data(Groceries)
rules5<-apriori(Groceries,parameter=list(support=0.002,confidence=0.5)) #生成关联规则rules5
plot(rules5)
library(arulesViz)
install.packages(c("BH", "boot", "caret", "class", "cluster", "codetools", "curl", "digest", "doParallel", "effects", "foreach", "foreign", "GGally", "ggplot2", "git2r", "h2o", "Hmisc", "httr", "irlba", "iterators", "jsonlite", "kernlab", "KernSmooth", "knitr", "lattice", "manipulate", "MASS", "Matrix", "memoise", "mgcv", "mvtnorm", "nlme", "nnet", "pbkrtest", "R6", "randomForest", "Rcpp", "RcppEigen", "rgl", "rmarkdown", "rpart", "rstudioapi", "spatial", "statmod", "stringi", "survival"))
install.packages(c("BH", "boot", "caret", "class", "cluster",
install.packages(c("BH", "boot", "class"))
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
remove.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages(c("BH", "caret", "curl", "devtools", "digest", "doParallel", "effects", "foreach", "foreign", "GGally", "ggplot2", "git2r", "h2o", "Hmisc", "httr", "lattice", "manipulate", "MASS", "Matrix", "memoise", "mgcv", "mvtnorm", "nlme", "nnet", "pbkrtest", "R6", "randomForest", "rstudioapi", "spatial", "statmod"))
install.packages("stats")
remove.packages("stats")
install.packages("stats")
library(stats)
library(stats)
remove.packages("stats")
install.packages("stats")
install.packages("stats")
library(stats)
library(kknn)
data(miete)
head(miete)
dim(miete)
summary(miete)
library(sampling)
n<-round(2/3*nrow(miete)/5) #按照训练集占数据总量2/3的比例，计算每一等级中应抽取的样本量
sub_train<-strata(miete,stratanames = "nmkat",size = rep(n,5),method = "srswor")  #以nmkat变量的5个等级划分层次，进行分层抽样
head(sub_train)
data_train<-getdata(miete[,c(-1,-3,-12)],sub_train$ID_unit)
data_test<-getdata(miete[,c(-1,-3,-12)],-sub_train$ID_unit)
library(MASS)
fit_lda1<-lda(nmkat~.,data_train)
names(fit_lda1)
fit_lda1$prior #查看本次执行过程中所使用的先验概率
fit_lda1$counts #查看各类别的样本量
fit_lda1$means #查看各变量在每一类别中的均值
fit_lda2<-lda(data_train[,-12],data_train[,12])
plot(fit_lda1)
plot(fit_lda1,dimen=1)
plot(fit_lda1,dimen=2)
plot(fit_lda1,dimen=1)
win.graph(width=4.875, height=2.5,pointsize=8)
plot(fit_lda1,dimen=1)
plot(fit_lda1,dimen=1)
plot(fit_lda1,dimen=1)
win.graph(width=40.875, height=20.5,pointsize=8)
plot(fit_lda1,dimen=1)
win.graph(width=45, height=22,pointsize=8)
plot(fit_lda1,dimen=1)
pre_lda1<-predict(fit_lda1,data_test)
names(pre_lda1)
pre_lda1$class
pre_lda1$posterior
pre_lda1$x
head(pre_lda1$posterior)
head(pre_lda1$class)
table(pre_lda1$nmkat,pre_lda1$class)
pre_lda1$nmkat
table(data_test$nmkat,pre_lda1$class)
sum(as.numeric(pre_lda1$class)!=as.numeric(data_test$nmkat))
sum(as.numeric(pre_lda1$class)!=as.numeric(data_test$nmkat))/nrow(data_test)
error_lda1<-sum(as.numeric(pre_lda1$class)!=as.numeric(data_test$nmkat))/nrow(data_test)
install.packages("qda(x, grouping, ..., subset, na.action)")
install.packages("klaR")
library("klaR")
fit_bayes1<-NaiveBayes(nmkat~.,data = data_train)
names(fit_bayes1)
fit_bayes1$apriori
fit_bayes1$tables
fit_bayes1$levels
fit_bayes1$call
fit_bayes1$usekernel
fit_bayes1$varnames
plot(fit_bayes1,vars="wfl",n=50)
plot(fit_bayes1,vars="wfl",n=50,col=c(1,"darkgrey",1,"darkgrey",1))
plot(fit_bayes1,vars="wfl",n=50)
plot(fit_bayes1,vars="wfl",n=5)
plot(fit_bayes1,vars="wfl",n=50)
plot(fit_bayes1,vars="mvdauer",n=50)
plot(fit_bayes1,vars="nmqm",n=50)
plot(fit_bayes1,vars="wfl",n=50)
plot(fit_bayes1,vars="nmqm",n=50)
plot(fit_bayes1,vars="mvdauer",n=50)
fit_bayes2<-NaiveBayes(data_train[,-12],data_train[,12])
pre_bayes1<-predict(fit_bayes1,data_test)
pre_bayes1
table(data_test$nmkat,pre_bayes1$class)
error_bayes1<-sum(as.numeric(pre_bayes1$class)!=as.numeric(data_test$nmkat))/nrow(data_test) #计算错误率
error_bayes1
error_lda1
install.packages("e1071")
library(e1071)
library(e1071)
264/8
head(airquality)
g <- airquality$Month
l <- split(airquality, g)
l
head(l)
library("reshape2")
strsplit("a.b.c", ".")
strsplit("a.b.c", "[.]")
a <- as.list(c(1:4, NA))
melt(a)
head(airquality)
aqm <- melt(airquality, id=c("month", "day"), na.rm=TRUE)
aqm <- melt(airquality, id=c("Month", "Day"), na.rm=TRUE)
head(aqm)
g <- airquality$Month
l <- split(airquality, g)
l
head(airquality)
setwd("D:/feirie_work/PortableGit/work/read_book/R_AND_DATA_MINING/datasets")
houseIndex<-read.csv("House-index-canberra.csv")
names(houseIndex)<-c("date","index")
dim(houseIndex)
n<-nrow(houseIndex)
cat(paste("HPI from",houseIndex$date[1],"to",houseIndex$date[n]))
lct <- Sys.getlocale("LC_TIME")
Sys.setlocale("LC_TIME", "C")
dates<-strptime(houseIndex$date,format="%d-%b-%y")
houseIndex$year<-dates$year+1900
houseIndex$month<-dates$mon+1
fromYear<-houseIndex$year[1]
plot(houseIndex$index,pty=1,type="l",lty="solid",xaxt="n",xlab="",ylab="Index",main=paste("HPI - Since ",fromYear,sep=""))
nYear<-n/12
posEveryYear<-12*(1:nYear)-11
axis(1,labels=houseIndex$date[posEveryYear],las=3,at=posEveryYear)
abline(h=1:4,col="gray",lty="dotted")
posEvery5Year<-12*(5*1:ceiling(nYear/5)-4)-11
abline(v=posEvery5Year,col="gray",lty="dotted")
houseIndex$delta<-houseIndex$index-c(1,houseIndex$index[-n])
plot(houseIndex$delta,main="Increase in HPI",xaxt="n",xlab="")
axis(1,labels=houseIndex$date[posEveryYear],las=3,at=posEveryYear)
abline(h=0,lty="dotted")
houseIndex$rate<-houseIndex$index/c(1,houseIndex$index[-n])-1
plot(houseIndex$rate,xaxt="n",xlab="",ylab="HPI Increase Rate",col=ifelse(houseIndex$rate>0,"green","red"),pch=ifelse(houseIndex$rate>0,"+","o"))
axis(1,labels=houseIndex$date[posEveryYear],las=3,at=posEveryYear)
abline(h=0,lty="dotted")
rateMatrix<-xtabs(rate~month+year,data=houseIndex)
roud(rateMatrix[,1:4],digits=4)
round(rateMatrix[,1:4],digits=4)
barplot(rateMatrix,beside = T)
barplot(rateMatrix,beside = T,space = c(0,2))
barplot(rateMatrix,beside = T,space = c(0,2),col=ifelse(rateMatrix>0,"green","red"))
barplot(rateMatrix,beside = T,space = c(0,2),col=ifelse(rateMatrix>0,"green","red"),ylab="HPI Increase Rate",cex.names = 1.2)
x <- cbind(x1 = 3, x2 = c(4:1, 2:5))
x
rowSums(x)
colSums(x)
colSums(rateMatrix>0)
numPositiveMonths<-colSums(rateMatrix>0)
barplot(numPositiveMonths)
barplot(numPositiveMonths,xlab="Year",ylab="Number of Months with Increased HPI")
yearlyMean<-colMeans(rateMatrix)
barplot(yearlyMean)
barplot(yearlyMean,main="Yearly Average Increase Rates of HPI",col=ifelse(yearlyMean>0,"green","red"),xlab="Year")
monthlyMean=rowMeans(rateMatrix)
head(monthlyMean)
monthlyMean
plot(names(monthlyMean),monthlyMean)
plot(names(monthlyMean),monthlyMean,type="b")
plot(names(monthlyMean),monthlyMean,type="b",xlab="Month",main="Monthly Average Increase Rages of HPI")
summary(houseIndex$rate)
boxplot(houseIndex$rate,ylab="HPI Increase Rate")
head(houseIndex)
boxplot(rate~year,data=houseIndex,xlab="year",ylab="HPI Increase Rate")
boxplot(rate~month,data=houseIndex,xlab="month",ylab="HPI Increase Rate")
hpi<-ts(houseIndex$index,start=c(1990,1),frequency = 12)
f<-stl(hpi,"per")
plot(f)
f
f$time.series
head(f)
f$time.series[1:12,]
f$time.series[1:12,"seasonal"]
plot(f$time.series[1:12,"seasonal"],type="b")
head(f$time.series)
dim(f$time.series)
plot(f$time.series[1:12,"seasonal"],type="b",xlab="Month",ylab="Seasonal Components")
f2<-decompose(hpi)
plot(f2)
plot(f2$figure)
plot(f2$figure,type="b")
plot(f2$figure,type="b",xlab="Month",ylab="Seasonal Components")
startYear<-1990
endYear<-2010
nYearAhead<-4
fit<-arima(hpi,order=c(2,0,1),seasonal = list(order=c(2,1,0),period=12))
list(order=c(2,1,0),period=12)
fit<-arima(hpi,order=c(2,0,1),seasonal = list(order=c(2,1,0),period=12))
head(hpi)
hpi
head(USAccDeaths)
hpi
type(hpi)
class(hpi)
arima(hpi)
arima(hpi,order=c(2,0,1))
