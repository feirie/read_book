dimnames=list(users=paste("u", 1:5, sep=''),
items=paste("i", 1:10, sep='')))
install.packages('shiny')
library("shiny")
runApp("d:/work/temp/shinyapp/1")
runApp("d:/work/temp/shinyapp/1")
runExample("01_hello")
runApp("d:/work/temp/shinyapp/1")
runExample("06_tabsets")
runExample("11_timer")
runApp("d:/work/temp/shinyapp/1")
runApp("d:/work/temp/shinyapp/1")
runApp("d:/work/temp/shinyapp/1")
runApp("d:/work/temp/shinyapp/1")
runApp("d:/work/temp/shinyapp/1")
runApp("d:/work/temp/shinyapp/1")
runApp("d:/work/temp/shinyapp/1")
runApp("stockVis")
install.packages("quantmod")
library("quantmod")
runApp("stockVis")
install.packages("RJDBC")
library("rpart")
library("RWeka")
install.packages("RWeka")
library("mvpart")
install.packages("mvpart")
library("mvpart")
head(car)
library("datasets")
car.test.frame
car.test.frame$Mileage<-100*4.546/(1.6*car.test.frame$Mileage)
names(car.test.frame)<-c("价格","产地","可靠性","英里数","类型","车重","发动机功率","净马力")
head(car.test.frame)
str(car.test.frame)
car.test.frame$"水平油耗"<-NA
which(car.test.frame$"油耗">11.6)
car.test.frame$"油耗">11.6
car.test.frame$"油耗"
car.test.frame
head(car.test.frame)
names(car.test.frame)<-c("价格","产地","可靠性","油耗","类型","车重","发动机功率","净马力")
car.test.frame$"油耗">11.6
head(car.test.frame)
names(car.test.frame)<-c("价格","产地","可靠性","油耗","类型","车重","发动机功率","净马力","水平油耗")
car.test.frame$"水平油耗"[which(car.test.frame$"油耗">11.6)]<-"A"
car.test.frame$"水平油耗"[which(car.test.frame$"油耗"<9)]<-"C"
car.test.frame$"水平油耗"[which(car.test.frame$"油耗"==NA)]<-"B"
summary(car.test.frame)
table(car.test.frame$"水平油耗"
)
car.test.frame$"油耗">11.6
sum(car.test.frame$"油耗">11.6)
sum(car.test.frame$"油耗"<9)
car.test.frame$"水平油耗"<-NA
car.test.frame$"水平油耗"[which(car.test.frame$"油耗">11.6)]<-"A"
car.test.frame$"水平油耗"[which(car.test.frame$"油耗"<9)]<-"C"
car.test.frame$"水平油耗"[which(car.test.frame$"水平油耗"==NA)]<-"B"
table(car.test.frame$"水平油耗")
car.test.frame$"水平油耗"==NA
is.na(car.test.frame$"水平油耗")
car.test.frame$"水平油耗"[which(is.na(car.test.frame$"水平油耗"))]<-"B"
table(car.test.frame$"水平油耗")
car.test.frame[1:10,c(4,9)]
table(car.test.frame$"水平油耗")
table(car.test.frame$"水平油耗")/4
round(table(car.test.frame$"水平油耗")/4)
library(sampling)
sub<-strata(car.test.frame,stratanames = "分组油耗",size=(round(table(car.test.frame$"水平油耗")/4)))
sub<-strata(car.test.frame,stratanames = "分组油耗",size=round(table(car.test.frame$"水平油耗")/4))
sub<-strata(car.test.frame,stratanames = "分组油耗",size=c(2,4,9))
sub<-strata(car.test.frame,stratanames = "分组油耗",size=c(2,4,9), method=“srswor"")
sub<-strata(car.test.frame,stratanames = "分组油耗",size=c(2,4,9), method=“srswor")
library(datasets)
car
iris
sub1<-sample(nrow(iris),10,replace = T)
sub1
rep(0,nrow(iris)-1,1)
c(rep(0,nrow(iris)-1,1))
nrow(iris)
rep(0,1)
rep(0,10)
sub2<-sample(nrow(iris),10,replace = T,prob=c(rep(0,nrow(iris)-1),1))
sub2
library(sampling)
library(MASS)
Insurance
head(library(MASS))
head(Insurance)
sub4<-strata(Insurance,stratanames = "District",size = c(1,2,3,4),method = "srswor")
sub4
sub4<-strata(Insurance,stratanames = "District",size = c(1,2,3,4),method = "srswor",description = T)
getdata(Insurance,sub4)
Insurance[sub4,]
sub4
sub6<-strata(Insurance,stratanames = "District",size = c(1,2,3,4),method = "srswor",pik=Insurance$Claims)
sub6
getdata(Insurance,sub6)
sub6<-strata(Insurance,stratanames = "District",size = c(1,2,3,4),method = "systematic",pik=Insurance$Claims)
summary(Insurance)
sub6
getdata(Insurance,sub6)
sub7<-cluster(Insurance,clustername = "District",size = 2,method = "srswor",description = T)
sub7
library("rpart")
data(car.test.frame)
head(car.test.frame)
car.test.frame$Mileage<-100*4.546/(1.6*car.test.frame$Mileage) #将英里数的取值换算为"油耗"指标
names(car.test.frame)<-c("价格","产地","可靠性","油耗","类型","车重","发动机功率","净马力")
head(car.test.frame)
str(car.test.frame)
summary(car.test.frame)
car.test.frame$"水平油耗"<-NA
car.test.frame$"水平油耗"[which(car.test.frame$"油耗">11.6)]<-"A"
car.test.frame$"水平油耗"[which(car.test.frame$"油耗"<9)]<-"C"
car.test.frame$"水平油耗"[which(is.na(car.test.frame$"水平油耗"))]<-"B"
car.test.frame[1:10,c(4,9)]
table(car.test.frame$"水平油耗")
library(sampling)
sub=strata(car.test.frame,size = c(2,4,9),method = "srswor")
sub=strata(car.test.frame,size = c(2,4,9),method = "srswor",stratanames = "水平油耗")
sub
table(car.test.frame$"水平油耗")
table(car.test.frame$"水平油耗")/4
round(table(car.test.frame$"水平油耗")/4)
type(round(table(car.test.frame$"水平油耗")/4))
typeof(round(table(car.test.frame$"水平油耗")/4))
typeof(c(1,2))
sub=strata(car.test.frame,size = round(table(car.test.frame$"水平油耗")/4),method = "srswor",stratanames = "水平油耗")
sub
sub
head(car.test.frame)
order(car.test.frame$"水平油耗")
order(car.test.frame$"水平油耗",decreasing=T)
order(car.test.frame$"水平油耗",decreasing=F)
car.test.frame[order(car.test.frame$"水平油耗",decreasing=F),]
car_order<-car.test.frame[order(car.test.frame$"水平油耗",decreasing=F),]
sub=strata(car_order,size = c(2,4,9),method = "srswor",stratanames = "水平油耗")
sub
train_car<-car.test.frame[-sub$ID_unit,]
nrow(train_car)
test_car<-car.test.frame[sub$ID_unit,]
nrow(test_car)
library(rpart)
head(car.test.frame)
formula_car_reg<-油耗~价格+产地+可靠性+油耗+类型+车重+发动机功率+净马力
rp_car_reg<-rpart(formula_car_reg,data = train_car,method = "anova")
formula_car_reg<-水平油耗~价格+产地+可靠性+油耗+类型+车重+发动机功率+净马力
rp_car_reg<-rpart(formula_car_reg,data = train_car,method = "anova")
print(rp_car_reg)
rp_car_reg
head(car.test.frame)
formula_car_reg<-油耗~价格+产地+可靠性+油耗+类型+车重+发动机功率+净马力
rp_car_reg<-rpart(formula_car_reg,data = train_car,method = "anova")
rp_car_reg
printcp(rp_car_reg)
set.seed(1234)
car_order<-car.test.frame[order(car.test.frame$"水平油耗",decreasing=F),]
sub=strata(car.test.frame,size = c(2,4,9),method = "srswor",stratanames = "水平油耗")
train_car<-car.test.frame[-sub$ID_unit,]
test_car<-car.test.frame[sub$ID_unit,]
formula_car_reg<-水平油耗~价格+产地+可靠性+油耗+类型+车重+发动机功率+净马力  #设定模型公式
rp_car_reg<-rpart(formula_car_reg,data = train_car,method = "anova")  #按照公式对训练集train_car构建回归树
print(rp_car_reg) #导出回归树的cp表格
formula_car_reg<-油耗~价格+产地+可靠性+油耗+类型+车重+发动机功率+净马力  #设定模型公式
rp_car_reg<-rpart(formula_car_reg,data = train_car,method = "anova")  #按照公式对训练集train_car构建回归树
print(rp_car_reg) #导出回归树的cp表格
print(rp_car_reg)
printcp(rp_car_reg)
summary(rp_car_reg)
rp_car_reg<-rpart(formula_car_reg,data = train_car,method = "anova",minsplit=10)
rp_car_reg1<-rpart(formula_car_reg,data = train_car,method = "anova",minsplit=10)
rp_car_reg<-rpart(formula_car_reg,data = train_car,method = "anova")
rp_car_reg1<-rpart(formula_car_reg,data = train_car,method = "anova",minsplit=10)
#将分支包含最小样本数minsplit从默认值20更改为10
print(rp_car_reg1)
printcp(rp_car_reg1)
summary(rp_car_reg1)
rp_car_reg
rp_car_reg1
printcp(rp_car_reg)
printcp(rp_car_reg1)
rp_car_reg2<-rpart(formula_car_reg,data = train_car,method = "anova",cp=0.1)
#将CP值从默认值0.01改为0.1
print(rp_car_reg2)
printcp(rp_car_reg2)
summary(rp_car_reg2)
rp_car_reg3<-prune.rpart(rp_car_reg,cp=0.1)
print(rp_car_reg3)
rp_car_reg4<-rpart(formula_car_reg,data = train_car,method = "anova",maxdepth=1)
rp_car_reg4
rp_car_plot<-rpart(formula_car_reg,data = train_car,method = "anova",minsplit=10)
print(rp_car_plot)
rpart.plot(rp_car_plot)
plot(rp_car_plot)
install.packages("rpart.plot")
library(rpart.plot)
rpart.plot(rp_car_plot)
library(sampling)
install.packages("adabag")
library(adabag)
library("randomForest")
set.seed(4)
data(mtcars)
mtcars_rf<-randomForest(mpg~.,data = mtcars,ntree = 1000,importance = T)
importance(mtcars_rf)
set.seed(1)
data(iris)
iris_rf<-randomForest(Species~.,data = mtcars,ntree = 1000,proximity=T)
head(iris)
iris_rf<-randomForest(Species~.,data = mtcars,ntree = 1000,proximity=T)
iris_rf<-randomForest(Species~.,data = iris,proximity=T)
119/27
101/23
MDSplot(iris_rf,iris$Species,palette = rep(1,3),pch=as.numeric(iris$Species))
data(iris)
iris.na<-iris
iris.na[75,2]<-NA
iris.na[125,3]<-NA
set.seed(111)
iris.imputed<-rfImpute(Species~.,data=iris.na)
list("real"=iris[c(75,125),1:4])
list("real"=iris[c(75,125),1:4],"hava-NA"=iris.na[c(75,125),1:4])
list("real"=iris[c(75,125),1:4],"hava-NA"=iris.na[c(75,125),1:4],"disposed"=iris.imputed[c(75,125),1:4])
list("real"=iris[c(75,125),1:4],"hava-NA"=iris.na[c(75,125),1:4],"disposed"=round(iris.imputed[c(75,125),1:4],1))
round(iris.imputed[c(75,125),2:5],1)
list("real"=iris[c(75,125),1:4],"hava-NA"=iris.na[c(75,125),1:4],"disposed"=round(iris.imputed[c(75,125),2:5],1))
hist（treesize(iris_rf))
hist(treesize(iris_rf))
library(arules)
data(Groceries)
head(Groceries)
summary(Groceries)
inspect(Groceries[1:10])
rules0<-apriori(Groceries,parameter=list(support=0.001,confidence=0.5))
rules0
inspect(rules0[1:10])
rules1<-apriori(Groceries,parameter=list(support=0.005,confidence=0.5)) #120
rules2<-apriori(Groceries,parameter=list(support=0.005,confidence=0.6)) #22
rules3<-apriori(Groceries,parameter=list(support=0.005,confidence=0.64)) #4
inspect(rules3)
rules.sorted_sup<-sort(rules0,by="support")
rules.sorted_sup
rules.sorted_conf<-sort(rules0,by="confidence")
inspect(rules.sorted_conf[1:10])
rules.sorted_lift<-sort(rules0,by="lift")
inpsect(rules.sorted_lift[1:5])
inpspect(rules.sorted_lift[1:5])
inspect(rules.sorted_lift[1:5])
rules4<-apriori(Groceries,parameter=list(support=0.001,confidence=0.1,maxlen=2),appearance=list(rhs="mustard",default="lhs"))
inspect(rules4)
itemsets_apr<-apriori(Groceries,parameter=list(support=0.001,target="frequent itemsets"),control=list(sort=-1))
inspect(itemsets_apr[1:5])
itemsets_ecl<-eclat(Groceries,parameter=list(minlen=1,maxlen=3,support=0.001,target="frequent itemsets"),control=list(sort=-1))
inspect(itemsets_ecl[1:5])
library(arulesViz)
rules5<-apriori(Groceries,parameter=list(support=0.002,confidence=0.5)) #生成关联规则rules5
plot(rules5)
install.packages("arulesViz")
library(arulesViz)
rules5<-apriori(Groceries,parameter=list(support=0.002,confidence=0.5)) #生成关联规则rules5
plot(rules5)
plot(rules5)
plot(rules5,interactive=TRUE)
install.packages("grid")
install.packages("grid")
install.packages("grid")
install.packages("grid")
install.packages("grid")
library(arulesViz)
library(arules)
library(grid)
rules5<-apriori(Groceries,parameter=list(support=0.002,confidence=0.5)) #生成关联规则rules5
plot(rules5)
data(Groceries)
rules5<-apriori(Groceries,parameter=list(support=0.002,confidence=0.5)) #生成关联规则rules5
plot(rules5)
library(arulesViz)
install.packages(c("BH", "boot", "caret", "class", "cluster", "codetools", "curl", "digest", "doParallel", "effects", "foreach", "foreign", "GGally", "ggplot2", "git2r", "h2o", "Hmisc", "httr", "irlba", "iterators", "jsonlite", "kernlab", "KernSmooth", "knitr", "lattice", "manipulate", "MASS", "Matrix", "memoise", "mgcv", "mvtnorm", "nlme", "nnet", "pbkrtest", "R6", "randomForest", "Rcpp", "RcppEigen", "rgl", "rmarkdown", "rpart", "rstudioapi", "spatial", "statmod", "stringi", "survival"))
install.packages(c("BH", "boot", "caret", "class", "cluster",
install.packages(c("BH", "boot", "class"))
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
remove.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages(c("BH", "caret", "curl", "devtools", "digest", "doParallel", "effects", "foreach", "foreign", "GGally", "ggplot2", "git2r", "h2o", "Hmisc", "httr", "lattice", "manipulate", "MASS", "Matrix", "memoise", "mgcv", "mvtnorm", "nlme", "nnet", "pbkrtest", "R6", "randomForest", "rstudioapi", "spatial", "statmod"))
install.packages("stats")
remove.packages("stats")
install.packages("stats")
library(stats)
library(stats)
remove.packages("stats")
install.packages("stats")
install.packages("stats")
library(stats)
library(kknn)
data(miete)
head(miete)
dim(miete)
summary(miete)
library(sampling)
n<-round(2/3*nrow(miete)/5) #按照训练集占数据总量2/3的比例，计算每一等级中应抽取的样本量
sub_train<-strata(miete,stratanames = "nmkat",size = rep(n,5),method = "srswor")  #以nmkat变量的5个等级划分层次，进行分层抽样
head(sub_train)
data_train<-getdata(miete[,c(-1,-3,-12)],sub_train$ID_unit)
data_test<-getdata(miete[,c(-1,-3,-12)],-sub_train$ID_unit)
library(MASS)
fit_lda1<-lda(nmkat~.,data_train)
names(fit_lda1)
fit_lda1$prior #查看本次执行过程中所使用的先验概率
fit_lda1$counts #查看各类别的样本量
fit_lda1$means #查看各变量在每一类别中的均值
fit_lda2<-lda(data_train[,-12],data_train[,12])
plot(fit_lda1)
plot(fit_lda1,dimen=1)
plot(fit_lda1,dimen=2)
plot(fit_lda1,dimen=1)
win.graph(width=4.875, height=2.5,pointsize=8)
plot(fit_lda1,dimen=1)
plot(fit_lda1,dimen=1)
plot(fit_lda1,dimen=1)
win.graph(width=40.875, height=20.5,pointsize=8)
plot(fit_lda1,dimen=1)
win.graph(width=45, height=22,pointsize=8)
plot(fit_lda1,dimen=1)
pre_lda1<-predict(fit_lda1,data_test)
names(pre_lda1)
pre_lda1$class
pre_lda1$posterior
pre_lda1$x
head(pre_lda1$posterior)
head(pre_lda1$class)
table(pre_lda1$nmkat,pre_lda1$class)
pre_lda1$nmkat
table(data_test$nmkat,pre_lda1$class)
sum(as.numeric(pre_lda1$class)!=as.numeric(data_test$nmkat))
sum(as.numeric(pre_lda1$class)!=as.numeric(data_test$nmkat))/nrow(data_test)
error_lda1<-sum(as.numeric(pre_lda1$class)!=as.numeric(data_test$nmkat))/nrow(data_test)
install.packages("qda(x, grouping, ..., subset, na.action)")
install.packages("klaR")
library("klaR")
fit_bayes1<-NaiveBayes(nmkat~.,data = data_train)
names(fit_bayes1)
fit_bayes1$apriori
fit_bayes1$tables
fit_bayes1$levels
fit_bayes1$call
fit_bayes1$usekernel
fit_bayes1$varnames
plot(fit_bayes1,vars="wfl",n=50)
plot(fit_bayes1,vars="wfl",n=50,col=c(1,"darkgrey",1,"darkgrey",1))
plot(fit_bayes1,vars="wfl",n=50)
plot(fit_bayes1,vars="wfl",n=5)
plot(fit_bayes1,vars="wfl",n=50)
plot(fit_bayes1,vars="mvdauer",n=50)
plot(fit_bayes1,vars="nmqm",n=50)
plot(fit_bayes1,vars="wfl",n=50)
plot(fit_bayes1,vars="nmqm",n=50)
plot(fit_bayes1,vars="mvdauer",n=50)
fit_bayes2<-NaiveBayes(data_train[,-12],data_train[,12])
pre_bayes1<-predict(fit_bayes1,data_test)
pre_bayes1
table(data_test$nmkat,pre_bayes1$class)
error_bayes1<-sum(as.numeric(pre_bayes1$class)!=as.numeric(data_test$nmkat))/nrow(data_test) #计算错误率
error_bayes1
error_lda1
install.packages("e1071")
library(e1071)
library(e1071)
setwd("D:/feirie_work/PortableGit/work/read_book/DM_R_IN_ACTION/datasets")
scale01=function(x){
ncol<-dim(x)[2]-1 #
nrow<-dim(x)[1]
new_scale<-matrix(0,nrow,ncol)
for(i in 1:ncol){
max<-max(x[,i])
min<-min(x[,i])
for(j in 1:nrow){
new_scale[j,i]<-(x[j,i]-min)/(max-min)
}
}
new_scale
}
wine<-read.csv("winequality-white.csv",sep = ";")
set.seed(71)
samp<-sample(1:nrow(wine),3000)
wine[samp,1:11]<-scale01(wine[samp,])
head(wine)
nrow(wine)
nrow(wine[samp,])
set.seed(71)
samp<-sample(1:nrow(wine),3000)
nrow(samp)
length(samp)
nrow(wine[samp,])
nrow(wine)
scale01(wine[samp,])
nrow(scale01(wine[samp,]))
r<-1/max(abs(wine[samp,1:11]))
r
head(wine)
model1<-nnet(quality~.,data=wine,subset=samp,size=4,rang=r,decay=5e-4,maxit=200)
library(nnet)
model1<-nnet(quality~.,data=wine,subset=samp,size=4,rang=r,decay=5e-4,maxit=200)
x<-subset(wine,select=-quality)
head(x)
x<-subset(wine,select=-quality)
y<-wine[,12]
y<-class.ind(y)
set.seed(101)
model2<-nnet(x,y,size=4,rang=r,decay=5e-4,maxit=200)
summary(model1)
summary(model2)
x<-wine[,1:11]
pred<-predict(model1,x,type="class")
pred<-predict(model1,x)
dim(pred)
head(pred)
wine<-read.csv("winequality-white.csv",sep = ";")
wine$quality.factor<-NA
wine$quality.factor[which(wine$quality<6)]<-"bad"
wine$quality.factor[which(wine$quality>6)]<-"good"
wine$quality.factor[which(wine$quality==6)]<-"mid"
wine$quality.factor<-factor(wine$quality.factor)
wine$quality<-NULL
set.seed(71)
samp<-sample(1:nrow(wine),3000)
wine[samp,1:11]<-scale01(wine[samp,])
r<-1/max(abs(wine[samp,1:11]))
set.seed(101)
model1<-nnet(quality.factor~.,data=wine,subset=samp,size=4,rang=r,decay=5e-4,maxit=200)
summary(model1)
x<-subset(wine,select=-quality.factor)
y<-wine[,12]
y<-class.ind(y)
set.seed(101)
model2<-nnet(x,y,size=4,rang=r,decay=5e-4,maxit=200)
x<-wine[,1:11]
pred<-predict(model1,x,type="class")
pred
set.seed(110)
pred[sample(1:nrow(wine),8)]
xt<-wine[,1:11]
pred<-predict(model2,xt)
dim(pred)
pred[sample(1:4898,4),]
name<-c("bad","good","mid")
prednew<-max.col(pred)
head(prednew)
head(pred)
name<-c("bad","good","mid")
pred_max_col<-max.col(pred)
pred_name<-name[pred_max_col]
head(pred_name)
table(max.col(y),pred_name)
head(max.col(y))
table(max.col(y),pred_max_col)
model1<-nnet(x,y,rang=1/max(abs(x)),size=4,maxit=500,decay=5e-4)
model2<-nnet(x,y,rang=1/max(abs(x)),size=4,maxit=500,decay=5e-4)
model1$convergence
model2$convergence
model1$value
model2$value
model3<-nnet(x,y,rang=1/max(abs(x)),size=4,maxit=500,decay=5e-4)
model3$value
head(iris)
summary(iris)
pred1<-name[max.col(predict(model1,x))]
pred2<-name[max.col(predict(model2,x))]
table(iris$Species,pred1)
pred1
length(pred1)
name<-c("setosa","versicolor","virginica")
pred1<-name[max.col(predict(model1,x))]
pred2<-name[max.col(predict(model2,x))]
table(iris$Species,pred1)
pred1
nrow(iris)
x<-iris[,-5]
y<-iris[,5]
name<-c("setosa","versicolor","virginica")
pred1<-name[max.col(predict(model1,x))]
pred2<-name[max.col(predict(model2,x))]
table(iris$Species,pred1)
table(iris$Species,pred2)
pred2
model1<-nnet(x,y,rang=1/max(abs(x)),size=4,maxit=500,decay=5e-4)
model2<-nnet(x,y,rang=1/max(abs(x)),size=4,maxit=500,decay=5e-4)
x
y
data(iris)
x<-iris[,-5]
y<-iris[,5]
model1<-nnet(x,y,rang=1/max(abs(x)),size=4,maxit=500,decay=5e-4)
model2<-nnet(x,y,rang=1/max(abs(x)),size=4,maxit=500,decay=5e-4)
max(abs(x))
1/max(abs(x))
x<-iris[,-5]
y<-class.ind(iris[,5])
model1<-nnet(x,y,rang=1/max(abs(x)),size=4,maxit=500,decay=5e-4)
model2<-nnet(x,y,rang=1/max(abs(x)),size=4,maxit=500,decay=5e-4)
model1$value
model2$value
name<-c("setosa","versicolor","virginica")
pred1<-name[max.col(predict(model1,x))]
pred2<-name[max.col(predict(model2,x))]
table(iris$Species,pred1)
table(iris$Species,pred2)
